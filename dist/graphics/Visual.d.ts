import { Material } from "./Material";
import { Geometry, GraphicUpdateResult } from "./geometry/Geometry";
import { Camera } from "./camera/Camera";
import { VisualGroup } from "./VisualGroup";
import { SerializedObject } from "../core/SerializableObject";
import { Component } from "../core/Component";
import { ObjectProps } from "../core/Types";
import { Entity } from "../core/Entity";
import { Texture } from "./texture/Texture";
export declare class Visual extends Component {
    get version(): number;
    get material(): Material | null;
    get geometry(): Geometry | undefined;
    get group(): VisualGroup | null;
    get castShadows(): boolean;
    set castShadows(cast: boolean);
    get receiveShadows(): boolean;
    set receiveShadows(receive: boolean);
    get receiveFog(): boolean;
    set receiveFog(receive: boolean);
    set geometry(geometry: Geometry | undefined);
    set material(material: Material | null);
    set group(group: VisualGroup | null);
    get vertexBuffer(): import("./VertexBuffer").VertexBuffer | null;
    get animatedMaterial(): Material | undefined;
    set animatedMaterial(animatedMaterial: Material | undefined);
    get envMap(): Texture | null;
    set envMap(envMap: Texture | null);
    get worldTransform(): import("../spider-engine").Matrix44;
    get bucketId(): string;
    get isSkinned(): boolean;
    get isReflective(): boolean;
    get hasNormalMap(): boolean;
    get hasVertexColor(): boolean;
    private _castShadows;
    private _receiveShadows;
    private _receiveFog;
    private _group;
    private _geometry;
    private _material;
    private _uniqueAnimatedMaterialInstance?;
    private _envMap;
    constructor(props?: ObjectProps<Visual>);
    setEntity(entity: Entity): void;
    graphicUpdate(camera: Camera): GraphicUpdateResult;
    destroy(): void;
    upgrade(json: SerializedObject, previousVersion: number): SerializedObject;
}
